{"version":3,"sources":["components/ScoreBoard.js","components/Gameboard.styles.js","components/Candy.styles.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","Gameboard","styled","div","Candy","img","candyColors","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForColumnOfThree","columnOfThree","checkForRowOfFour","rowOfFour","includes","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","console","log","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995bd2e7.chunk.js","sourcesContent":["const ScoreBoard = ({score}) => {\r\n    return (\r\n        <div className=\"score-board\">\r\n            <h2>{score}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard","import styled from 'styled-components'\r\n\r\nexport const Gameboard = styled.div`\r\n    width: 560px; /* 560 because it's nicely dividable by 8 since ther are 8 rows & columns */\r\n    height: 560px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    background-color: #B8B8FF;\r\n    border-radius: 10px;\r\n`","import styled from 'styled-components'\r\n\r\nexport const Candy = styled.img`\r\n    width: 70px; /* is one eighth of the game board width */\r\n    height: 70px;\r\n`","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import './App.css';\nimport { useState, useEffect } from 'react'\nimport ScoreBoard from './components/ScoreBoard';\nimport { Gameboard } from './components/Gameboard.styles';\nimport { Candy } from './components/Candy.styles';\n\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst width = 8\nconst candyColors = [\n  blueCandy,\n  greenCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy\n]\n\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n      if(notValid.includes(i)) continue\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n      if(notValid.includes(i)) continue\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if(isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangement[i] = candyColors[randomNumber]\n      }\n      /* if square below is empty */\n      if ((currentColorArrangement[i + width]) === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }\n\n  console.log(scoreDisplay)\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target)\n  }\n\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n\n  const dragEnd = () => {\n\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId - width\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n    const isAColumnOfFour = checkForColumnOfFour()\n    const isARowOfFour = checkForRowOfFour()\n    const isAColumnOfThree = checkForColumnOfThree()\n    const isARowOfThree = checkForRowOfThree()\n\n    if(squareBeingReplacedId && validMove &&(isARowOfThree || isARowOfFour || isAColumnOfThree || isAColumnOfFour)) {\n      setSquareBeingDragged(null)\n      setSquareBeingReplaced(null)\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n      setCurrentColorArrangement([...currentColorArrangement])\n    }\n  }\n\n  const createBoard = () => {\n\n    const randomColorArrangement = []\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n      randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n  }\n\n  useEffect(() => {\n    createBoard()\n  }, [])\n\n  /* checks on matches every 100ms and replaces them with new colors if fount */\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      checkForRowOfFour()\n      moveIntoSquareBelow()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 100)\n\n    return () => clearInterval(timer)\n\n  }, [checkForColumnOfFour, checkForColumnOfThree, checkForRowOfThree, checkForRowOfFour, moveIntoSquareBelow, currentColorArrangement])\n\n\n\n  return (\n    <div className=\"app\">\n      <Gameboard>\n        {currentColorArrangement.map((candyColor, index) => (\n          <Candy\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={(dragStart)}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={(dragDrop)}\n            onDragEnd={(dragEnd)}\n          />\n        ))}\n      </Gameboard>\n      <ScoreBoard score={scoreDisplay}></ScoreBoard>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}